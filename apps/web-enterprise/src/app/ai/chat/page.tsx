"use client";

import { useState, useRef, useEffect, useCallback } from "react";
import axios from "axios";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Loader2, SendHorizontal } from "lucide-react";

interface ChatMessage {
  role: "user" | "bot";
  text: string;
}

export default function AIChatPage() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const chatRef = useRef<HTMLDivElement>(null);

  // Webhook URL –±–µ—Ä—ë–º –∏–∑ NEXT_PUBLIC_*
  const webhook = process.env.NEXT_PUBLIC_AI_AGENT_WEBHOOK_URL ?? "";

  const sendMessage = useCallback(async () => {
    const text = input.trim();
    if (!text) return;

    setMessages((prev) => [...prev, { role: "user", text }]);
    setInput("");
    setLoading(true);

    try {
      if (!webhook) {
        throw new Error("Webhook URL not configured");
      }

      const { data } = await axios.post(webhook, { query: text });
      const answer =
        data?.answer ??
        data?.data?.answer ??
        "ü§ñ –û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.";

      setMessages((prev) => [...prev, { role: "bot", text: answer }]);
    } catch (e) {
      setMessages((prev) => [
        ...prev,
        { role: "bot", text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞." },
      ]);
    } finally {
      setLoading(false);
    }
  }, [input, webhook]);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const el = chatRef.current;
    if (el) {
      el.scrollTo({ top: el.scrollHeight, behavior: "smooth" });
    }
  }, [messages]);

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
  if (!webhook) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[80vh] text-center p-6">
        <h1 className="text-2xl font-bold mb-4">‚ö†Ô∏è –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h1>
        <p className="text-muted-foreground max-w-md">
          –ù–µ –Ω–∞–π–¥–µ–Ω <code className="font-mono">NEXT_PUBLIC_AI_AGENT_WEBHOOK_URL</code>.
          –î–æ–±–∞–≤—å –µ–≥–æ –≤ <code>.env.local</code>, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å AI-–∞–≥–µ–Ω—Ç–∞.
        </p>
      </div>
    );
  }

  return (
    <div className="flex flex-col max-w-4xl mx-auto p-6 min-h-[calc(100vh-80px)]">
      <h1 className="text-2xl font-bold mb-4">üí¨ AI-—á–∞—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º –∞–≥–µ–Ω—Ç–æ–º</h1>

      <div
        ref={chatRef}
        className="flex-1 bg-muted/30 border border-border rounded-xl p-4 mb-4 overflow-y-auto max-h-[60vh] space-y-4"
      >
        {messages.map((msg, i) => (
          <div
            key={i}
            className={`flex ${msg.role === "user" ? "justify-end" : "justify-start"}`}
          >
            <div
              className={`max-w-[80%] px-4 py-2 rounded-xl text-sm shadow-sm ${
                msg.role === "user"
                  ? "bg-primary text-white"
                  : "bg-white border font-mono"
              }`}
            >
              {msg.text}
            </div>
          </div>
        ))}
        {loading && (
          <div className="text-sm text-muted-foreground animate-pulse">
            ‚è≥ AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å‚Ä¶
          </div>
        )}
      </div>

      <div className="flex gap-2">
        <Input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && sendMessage()}
          placeholder="–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∑–∞—è–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é?¬ª"
          className="flex-1"
        />
        <Button
          onClick={sendMessage}
          disabled={loading || !input.trim()}
          className="gap-2"
          aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
        >
          {loading ? (
            <Loader2 size={18} className="animate-spin" />
          ) : (
            <SendHorizontal size={18} />
          )}
          <span className="hidden sm:inline">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</span>
        </Button>
      </div>
    </div>
  );
}