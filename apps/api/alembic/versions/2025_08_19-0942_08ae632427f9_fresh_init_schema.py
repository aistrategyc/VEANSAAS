"""fresh init schema

Revision ID: 08ae632427f9
Revises: 
Create Date: 2025-08-19 09:42:28.669285

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '08ae632427f9'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('feature_flags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('enabled_globally', sa.Boolean(), nullable=False),
    sa.Column('rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_feature_flags_key'), 'feature_flags', ['key'], unique=True)
    op.create_table('plans',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('code', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_plan_features_gin', 'plans', ['features'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_plans_code'), 'plans', ['code'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('role', sa.String(length=6), nullable=False),
    sa.Column('position', sa.String(length=200), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('language', sa.String(length=10), nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('password_changed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('client_id', sa.UUID(), nullable=True),
    sa.Column('verification_token_hash', sa.String(length=255), nullable=True),
    sa.Column('verification_token_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_verification_token_hash'), 'users', ['verification_token_hash'], unique=False)
    op.create_table('api_keys',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('key_hash', sa.String(length=128), nullable=False),
    sa.Column('scopes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clients',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('subscription_tier', sa.Enum('free', 'basic', 'pro', name='subscriptiontier'), nullable=False),
    sa.Column('max_employees', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('email_verification_tokens',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_email_verification_tokens_token'), 'email_verification_tokens', ['token'], unique=True)
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('slug', sa.String(length=80), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('address', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('industry', sa.Enum('retail', 'it', 'marketing', 'education', 'other', name='industry_type'), nullable=True),
    sa.Column('size', sa.Enum('small', 'medium', name='company_size'), nullable=True),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("slug ~ '^[a-z0-9]+(?:-[a-z0-9]+)*$'", name='ck_organizations_slug_format'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_org_address_gin', 'organizations', ['address'], unique=False, postgresql_using='gin')
    op.create_index('ix_org_custom_fields_gin', 'organizations', ['custom_fields'], unique=False, postgresql_using='gin')
    op.create_index('ix_org_owner_created', 'organizations', ['owner_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_organizations_name'), 'organizations', ['name'], unique=False)
    op.create_index(op.f('ix_organizations_owner_id'), 'organizations', ['owner_id'], unique=False)
    op.create_index(op.f('ix_organizations_slug'), 'organizations', ['slug'], unique=True)
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('device_info', sa.String(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('uploads',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('owner_type', sa.String(length=50), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('url', sa.String(length=1024), nullable=False),
    sa.Column('content_type', sa.String(length=100), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('storage_key', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_uploads_created_at', 'uploads', ['created_at'], unique=False)
    op.create_index('ix_uploads_owner', 'uploads', ['owner_type', 'owner_id'], unique=False)
    op.create_index(op.f('ix_uploads_owner_id'), 'uploads', ['owner_id'], unique=False)
    op.create_index(op.f('ix_uploads_owner_type'), 'uploads', ['owner_type'], unique=False)
    op.create_index(op.f('ix_uploads_storage_key'), 'uploads', ['storage_key'], unique=True)
    op.create_index(op.f('ix_uploads_user_id'), 'uploads', ['user_id'], unique=False)
    op.create_table('brands',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('slug', sa.String(length=80), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("slug ~ '^[a-z0-9]+(?:-[a-z0-9]+)*$'", name='ck_brands_slug_format'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'slug', name='uq_brand_org_slug')
    )
    op.create_index('ix_brand_metadata_gin', 'brands', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_brands_name'), 'brands', ['name'], unique=False)
    op.create_index(op.f('ix_brands_org_id'), 'brands', ['org_id'], unique=False)
    op.create_index(op.f('ix_brands_slug'), 'brands', ['slug'], unique=False)
    op.create_table('change_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=True),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('changes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_change_logs_entity_id'), 'change_logs', ['entity_id'], unique=False)
    op.create_index(op.f('ix_change_logs_entity_type'), 'change_logs', ['entity_type'], unique=False)
    op.create_table('data_sources',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('facebook_ads', 'google_ads', 'tiktok_ads', 'ga4', 'telegram_bot', 'custom', name='data_source_type'), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.Enum('disconnected', 'connected', 'error', name='data_source_status'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_data_sources_org_id'), 'data_sources', ['org_id'], unique=False)
    op.create_index('ix_ds_config_gin', 'data_sources', ['config'], unique=False, postgresql_using='gin')
    op.create_index('ix_ds_type_status', 'data_sources', ['type', 'status'], unique=False)
    op.create_table('departments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('manager_id', sa.UUID(), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['manager_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['departments.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'name', name='uq_department_org_name')
    )
    op.create_index('ix_department_parent_id', 'departments', ['parent_id'], unique=False)
    op.create_index(op.f('ix_departments_manager_id'), 'departments', ['manager_id'], unique=False)
    op.create_index(op.f('ix_departments_name'), 'departments', ['name'], unique=False)
    op.create_index(op.f('ix_departments_org_id'), 'departments', ['org_id'], unique=False)
    op.create_index(op.f('ix_departments_parent_id'), 'departments', ['parent_id'], unique=False)
    op.create_table('event_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=True),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_event_logs_event_type'), 'event_logs', ['event_type'], unique=False)
    op.create_table('file_assets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=True),
    sa.Column('bucket', sa.String(length=120), nullable=False),
    sa.Column('object_key', sa.String(length=500), nullable=False),
    sa.Column('mime_type', sa.String(length=120), nullable=True),
    sa.Column('size_bytes', sa.Integer(), nullable=True),
    sa.Column('sha256_hex', sa.String(length=64), nullable=True),
    sa.Column('status', sa.Enum('queued', 'scanned', 'infected', 'ready', name='file_status'), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_file_assets_org_id'), 'file_assets', ['org_id'], unique=False)
    op.create_index(op.f('ix_file_assets_owner_id'), 'file_assets', ['owner_id'], unique=False)
    op.create_index('ix_file_meta_data_gin', 'file_assets', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('ix_file_org_owner', 'file_assets', ['org_id', 'owner_id'], unique=False)
    op.create_index('ix_file_status', 'file_assets', ['status'], unique=False)
    op.create_table('jwt_refresh_whitelists',
    sa.Column('jti', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('revoked', sa.Boolean(), nullable=False),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('jti')
    )
    op.create_index(op.f('ix_jwt_refresh_whitelists_org_id'), 'jwt_refresh_whitelists', ['org_id'], unique=False)
    op.create_table('kpis',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.Column('target_value', sa.Float(), nullable=False),
    sa.Column('current_value', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('on_track', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_kpis_org_id'), 'kpis', ['org_id'], unique=False)
    op.create_table('metric_definitions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('formula', sa.Text(), nullable=True),
    sa.Column('aggregation', sa.Enum('sum', 'avg', 'count', 'max', 'min', name='aggregation_type'), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'name', name='uq_metric_def_org_name')
    )
    op.create_index(op.f('ix_metric_definitions_name'), 'metric_definitions', ['name'], unique=False)
    op.create_index(op.f('ix_metric_definitions_org_id'), 'metric_definitions', ['org_id'], unique=False)
    op.create_index('ix_metric_meta_gin', 'metric_definitions', ['metadata'], unique=False, postgresql_using='gin')
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('EMAIL', 'IN_APP', 'PUSH', name='notificationtype', native_enum=False), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'SENT', 'FAILED', name='notificationstatus', native_enum=False), nullable=False),
    sa.Column('recipient', sa.String(length=255), nullable=False),
    sa.Column('subject', sa.String(length=255), nullable=True),
    sa.Column('body', sa.String(length=2000), nullable=True),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('last_attempt_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_notifications_org_id'), 'notifications', ['org_id'], unique=False)
    op.create_index(op.f('ix_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.create_table('objectives',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'ACTIVE', 'COMPLETED', 'ARCHIVED', name='objectivestatus', native_enum=False), nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_objectives_org_id'), 'objectives', ['org_id'], unique=False)
    op.create_table('org_compliances',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('legal', 'financial', 'environmental', 'data_protection', name='compliance_type'), nullable=False),
    sa.Column('status', sa.Enum('compliant', 'non_compliant', 'pending', name='compliance_status'), nullable=False),
    sa.Column('documents', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_audit_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'type', name='uq_org_compliance_type')
    )
    op.create_index('ix_compliance_documents_gin', 'org_compliances', ['documents'], unique=False, postgresql_using='gin')
    op.create_index('ix_compliance_meta_gin', 'org_compliances', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_org_compliances_org_id'), 'org_compliances', ['org_id'], unique=False)
    op.create_table('org_notification_settings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('defaults', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_org_notif_defaults_gin', 'org_notification_settings', ['defaults'], unique=False, postgresql_using='gin')
    op.create_index('ix_org_notif_rules_gin', 'org_notification_settings', ['rules'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_org_notification_settings_org_id'), 'org_notification_settings', ['org_id'], unique=False)
    op.create_table('projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'ACTIVE', 'COMPLETED', 'CANCELLED', name='projectstatus', native_enum=False), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_project_metadata_gin', 'projects', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_projects_name'), 'projects', ['name'], unique=False)
    op.create_index(op.f('ix_projects_org_id'), 'projects', ['org_id'], unique=False)
    op.create_table('rate_limits',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('key', sa.String(length=255), nullable=False),
    sa.Column('hits', sa.Integer(), nullable=False),
    sa.Column('window_start', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('window_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_rate_limit_key', 'rate_limits', ['key'], unique=False)
    op.create_index(op.f('ix_rate_limits_key'), 'rate_limits', ['key'], unique=False)
    op.create_index(op.f('ix_rate_limits_org_id'), 'rate_limits', ['org_id'], unique=False)
    op.create_table('responsibility_scopes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('object_type', sa.String(), nullable=False),
    sa.Column('object_id', sa.UUID(), nullable=True),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_responsibility_scopes_org_id'), 'responsibility_scopes', ['org_id'], unique=False)
    op.create_table('security_exceptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('exception_type', sa.String(), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('occurred_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_security_exceptions_org_id'), 'security_exceptions', ['org_id'], unique=False)
    op.create_table('subscriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('provider', sa.Enum('stripe', 'paddle', 'manual', name='billing_provider'), nullable=False),
    sa.Column('external_id', sa.String(length=120), nullable=True),
    sa.Column('status', sa.Enum('trialing', 'active', 'past_due', 'canceled', 'incomplete', name='subscription_status'), nullable=False),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=True),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=True),
    sa.Column('limits_override', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_subscription_limits_override_gin', 'subscriptions', ['limits_override'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_subscriptions_external_id'), 'subscriptions', ['external_id'], unique=False)
    op.create_index(op.f('ix_subscriptions_org_id'), 'subscriptions', ['org_id'], unique=False)
    op.create_index(op.f('ix_subscriptions_plan_id'), 'subscriptions', ['plan_id'], unique=False)
    op.create_table('task_labels',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'name', name='uq_task_label_org_name')
    )
    op.create_index(op.f('ix_task_labels_name'), 'task_labels', ['name'], unique=False)
    op.create_index(op.f('ix_task_labels_org_id'), 'task_labels', ['org_id'], unique=False)
    op.create_table('telegram_integrations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('bot_token_enc', sa.Text(), nullable=False),
    sa.Column('webhook_url', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('inactive', 'active', 'error', name='integration_status'), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_telegram_integrations_org_id'), 'telegram_integrations', ['org_id'], unique=False)
    op.create_index('ix_tg_settings_gin', 'telegram_integrations', ['settings'], unique=False, postgresql_using='gin')
    op.create_table('webhook_endpoints',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('target_url', sa.Text(), nullable=False),
    sa.Column('secret_enc', sa.Text(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('events', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_webhook_enabled', 'webhook_endpoints', ['enabled'], unique=False)
    op.create_index(op.f('ix_webhook_endpoints_org_id'), 'webhook_endpoints', ['org_id'], unique=False)
    op.create_index('ix_webhook_events_gin', 'webhook_endpoints', ['events'], unique=False, postgresql_using='gin')
    op.create_table('ad_accounts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('data_source_id', sa.UUID(), nullable=False),
    sa.Column('external_id', sa.String(length=120), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'data_source_id', 'external_id', name='uq_ad_account_external')
    )
    op.create_index(op.f('ix_ad_accounts_data_source_id'), 'ad_accounts', ['data_source_id'], unique=False)
    op.create_index(op.f('ix_ad_accounts_org_id'), 'ad_accounts', ['org_id'], unique=False)
    op.create_index('ix_ad_config_gin', 'ad_accounts', ['config'], unique=False, postgresql_using='gin')
    op.create_table('business_units',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('brand_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['brand_id'], ['brands.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'name', name='uq_bu_org_name')
    )
    op.create_index('ix_bu_metadata_gin', 'business_units', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_business_units_brand_id'), 'business_units', ['brand_id'], unique=False)
    op.create_index(op.f('ix_business_units_name'), 'business_units', ['name'], unique=False)
    op.create_index(op.f('ix_business_units_org_id'), 'business_units', ['org_id'], unique=False)
    op.create_table('invitations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('invited_email', sa.String(length=320), nullable=False),
    sa.Column('role', sa.Enum('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', name='membershiprole'), nullable=False),
    sa.Column('department_id', sa.UUID(), nullable=True),
    sa.Column('token', sa.String(length=64), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('invited_by_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'REJECTED', 'EXPIRED', name='invitationstatus'), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'invited_email', 'status', name='uq_invitation_org_email_status')
    )
    op.create_index('ix_invitation_expires_at', 'invitations', ['expires_at'], unique=False)
    op.create_index('ix_invitation_status', 'invitations', ['status'], unique=False)
    op.create_index('ix_invitation_token', 'invitations', ['token'], unique=True)
    op.create_index(op.f('ix_invitations_department_id'), 'invitations', ['department_id'], unique=False)
    op.create_index(op.f('ix_invitations_invited_by_id'), 'invitations', ['invited_by_id'], unique=False)
    op.create_index(op.f('ix_invitations_invited_email'), 'invitations', ['invited_email'], unique=False)
    op.create_index(op.f('ix_invitations_org_id'), 'invitations', ['org_id'], unique=False)
    op.create_index(op.f('ix_invitations_token'), 'invitations', ['token'], unique=True)
    op.create_table('key_results',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('objective_id', sa.UUID(), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=False),
    sa.Column('start_value', sa.Float(), nullable=False),
    sa.Column('target_value', sa.Float(), nullable=False),
    sa.Column('current_value', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['objective_id'], ['objectives.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_key_results_objective_id'), 'key_results', ['objective_id'], unique=False)
    op.create_table('memberships',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('department_id', sa.UUID(), nullable=True),
    sa.Column('role', sa.Enum('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', name='membershiprole'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', name='membershipstatus'), nullable=False),
    sa.Column('invited_by_id', sa.UUID(), nullable=True),
    sa.Column('joined_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'user_id', name='uq_membership_org_user')
    )
    op.create_index('ix_membership_meta_data_gin', 'memberships', ['meta_data'], unique=False, postgresql_using='gin')
    op.create_index('ix_membership_role', 'memberships', ['role'], unique=False)
    op.create_index('ix_membership_status', 'memberships', ['status'], unique=False)
    op.create_index(op.f('ix_memberships_department_id'), 'memberships', ['department_id'], unique=False)
    op.create_index(op.f('ix_memberships_org_id'), 'memberships', ['org_id'], unique=False)
    op.create_index(op.f('ix_memberships_user_id'), 'memberships', ['user_id'], unique=False)
    op.create_table('metric_targets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('metric_def_id', sa.UUID(), nullable=False),
    sa.Column('target_value', sa.Float(), nullable=False),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('on_track', 'at_risk', 'off_track', name='target_status'), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['metric_def_id'], ['metric_definitions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'metric_def_id', 'period_start', name='uq_metric_target_period')
    )
    op.create_index(op.f('ix_metric_targets_metric_def_id'), 'metric_targets', ['metric_def_id'], unique=False)
    op.create_index(op.f('ix_metric_targets_org_id'), 'metric_targets', ['org_id'], unique=False)
    op.create_index('ix_target_meta_gin', 'metric_targets', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('ix_target_period', 'metric_targets', ['period_start', 'period_end'], unique=False)
    op.create_table('oauth_credentials',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('data_source_id', sa.UUID(), nullable=False),
    sa.Column('access_token_enc', sa.Text(), nullable=False),
    sa.Column('refresh_token_enc', sa.Text(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_oauth_credentials_data_source_id'), 'oauth_credentials', ['data_source_id'], unique=False)
    op.create_index(op.f('ix_oauth_credentials_org_id'), 'oauth_credentials', ['org_id'], unique=False)
    op.create_index('ix_oauth_metadata_gin', 'oauth_credentials', ['metadata'], unique=False, postgresql_using='gin')
    op.create_table('project_members',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'user_id', name='uq_project_member_project_user')
    )
    op.create_index('ix_project_member_role', 'project_members', ['role'], unique=False)
    op.create_index(op.f('ix_project_members_org_id'), 'project_members', ['org_id'], unique=False)
    op.create_index(op.f('ix_project_members_project_id'), 'project_members', ['project_id'], unique=False)
    op.create_index(op.f('ix_project_members_user_id'), 'project_members', ['user_id'], unique=False)
    op.create_table('project_tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('todo', 'in_progress', 'review', 'done', 'cancelled', name='task_status'), nullable=False),
    sa.Column('priority', sa.Enum('low', 'medium', 'high', 'urgent', name='task_priority'), nullable=False),
    sa.Column('assignee_id', sa.UUID(), nullable=True),
    sa.Column('creator_id', sa.UUID(), nullable=True),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('estimated_hours', sa.Integer(), nullable=True),
    sa.Column('actual_hours', sa.Integer(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['assignee_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_project_tasks_assignee_id'), 'project_tasks', ['assignee_id'], unique=False)
    op.create_index(op.f('ix_project_tasks_creator_id'), 'project_tasks', ['creator_id'], unique=False)
    op.create_index(op.f('ix_project_tasks_project_id'), 'project_tasks', ['project_id'], unique=False)
    op.create_index(op.f('ix_project_tasks_title'), 'project_tasks', ['title'], unique=False)
    op.create_index('ix_task_metadata_gin', 'project_tasks', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('ix_task_status_priority', 'project_tasks', ['status', 'priority'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('parent_task_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('TODO', 'IN_PROGRESS', 'IN_REVIEW', 'DONE', 'CANCELLED', name='taskstatus', native_enum=False), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='taskpriority', native_enum=False), nullable=False),
    sa.Column('task_type', sa.Enum('TASK', 'BUG', 'FEATURE', 'IMPROVEMENT', 'RESEARCH', name='tasktype', native_enum=False), nullable=False),
    sa.Column('assignee_id', sa.UUID(), nullable=True),
    sa.Column('creator_id', sa.UUID(), nullable=True),
    sa.Column('reporter_id', sa.UUID(), nullable=True),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('estimated_hours', sa.Float(), nullable=True),
    sa.Column('actual_hours', sa.Float(), nullable=True),
    sa.Column('story_points', sa.Integer(), nullable=True),
    sa.Column('progress_percentage', sa.Integer(), nullable=False),
    sa.Column('is_recurring', sa.Boolean(), nullable=False),
    sa.Column('recurrence_pattern', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['assignee_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_task_id'], ['tasks.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reporter_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_task_assignee', 'tasks', ['assignee_id'], unique=False)
    op.create_index('ix_task_due_date', 'tasks', ['due_date'], unique=False)
    op.create_index('ix_task_meta_data_gin', 'tasks', ['meta_data'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_tasks_assignee_id'), 'tasks', ['assignee_id'], unique=False)
    op.create_index(op.f('ix_tasks_creator_id'), 'tasks', ['creator_id'], unique=False)
    op.create_index(op.f('ix_tasks_org_id'), 'tasks', ['org_id'], unique=False)
    op.create_index(op.f('ix_tasks_parent_task_id'), 'tasks', ['parent_task_id'], unique=False)
    op.create_index(op.f('ix_tasks_project_id'), 'tasks', ['project_id'], unique=False)
    op.create_index(op.f('ix_tasks_reporter_id'), 'tasks', ['reporter_id'], unique=False)
    op.create_index(op.f('ix_tasks_title'), 'tasks', ['title'], unique=False)
    op.create_table('locations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('brand_id', sa.UUID(), nullable=True),
    sa.Column('bu_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('address', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('timezone', sa.String(length=64), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('org_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['brand_id'], ['brands.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['bu_id'], ['business_units.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('org_id', 'name', name='uq_location_org_name')
    )
    op.create_index('ix_location_address_gin', 'locations', ['address'], unique=False, postgresql_using='gin')
    op.create_index('ix_location_metadata_gin', 'locations', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_locations_brand_id'), 'locations', ['brand_id'], unique=False)
    op.create_index(op.f('ix_locations_bu_id'), 'locations', ['bu_id'], unique=False)
    op.create_index(op.f('ix_locations_name'), 'locations', ['name'], unique=False)
    op.create_index(op.f('ix_locations_org_id'), 'locations', ['org_id'], unique=False)
    op.create_table('task_attachments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('uploaded_by_id', sa.UUID(), nullable=True),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('file_url', sa.String(length=500), nullable=True),
    sa.Column('content_type', sa.String(length=100), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uploaded_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_attachment_task', 'task_attachments', ['task_id'], unique=False)
    op.create_index(op.f('ix_task_attachments_task_id'), 'task_attachments', ['task_id'], unique=False)
    op.create_index(op.f('ix_task_attachments_uploaded_by_id'), 'task_attachments', ['uploaded_by_id'], unique=False)
    op.create_table('task_comments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('parent_comment_id', sa.UUID(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_type', sa.String(length=50), nullable=False),
    sa.Column('is_internal', sa.Boolean(), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['task_comments.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_comment_parent', 'task_comments', ['parent_comment_id'], unique=False)
    op.create_index('ix_comment_task_created', 'task_comments', ['task_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_task_comments_parent_comment_id'), 'task_comments', ['parent_comment_id'], unique=False)
    op.create_index(op.f('ix_task_comments_task_id'), 'task_comments', ['task_id'], unique=False)
    op.create_index(op.f('ix_task_comments_user_id'), 'task_comments', ['user_id'], unique=False)
    op.create_table('task_dependencies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('depends_on_task_id', sa.UUID(), nullable=False),
    sa.Column('dependency_type', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['depends_on_task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('task_id', 'depends_on_task_id', name='uq_task_dependency')
    )
    op.create_index('ix_task_dep_depends_on', 'task_dependencies', ['depends_on_task_id'], unique=False)
    op.create_index('ix_task_dep_task', 'task_dependencies', ['task_id'], unique=False)
    op.create_table('task_time_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('log_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('hours_spent', sa.Float(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_billable', sa.Boolean(), nullable=False),
    sa.Column('hourly_rate', sa.Float(), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_task_time_logs_task_id'), 'task_time_logs', ['task_id'], unique=False)
    op.create_index(op.f('ix_task_time_logs_user_id'), 'task_time_logs', ['user_id'], unique=False)
    op.create_index('ix_time_log_date', 'task_time_logs', ['log_date'], unique=False)
    op.create_index('ix_time_log_task_user', 'task_time_logs', ['task_id', 'user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_time_log_task_user', table_name='task_time_logs')
    op.drop_index('ix_time_log_date', table_name='task_time_logs')
    op.drop_index(op.f('ix_task_time_logs_user_id'), table_name='task_time_logs')
    op.drop_index(op.f('ix_task_time_logs_task_id'), table_name='task_time_logs')
    op.drop_table('task_time_logs')
    op.drop_index('ix_task_dep_task', table_name='task_dependencies')
    op.drop_index('ix_task_dep_depends_on', table_name='task_dependencies')
    op.drop_table('task_dependencies')
    op.drop_index(op.f('ix_task_comments_user_id'), table_name='task_comments')
    op.drop_index(op.f('ix_task_comments_task_id'), table_name='task_comments')
    op.drop_index(op.f('ix_task_comments_parent_comment_id'), table_name='task_comments')
    op.drop_index('ix_comment_task_created', table_name='task_comments')
    op.drop_index('ix_comment_parent', table_name='task_comments')
    op.drop_table('task_comments')
    op.drop_index(op.f('ix_task_attachments_uploaded_by_id'), table_name='task_attachments')
    op.drop_index(op.f('ix_task_attachments_task_id'), table_name='task_attachments')
    op.drop_index('ix_attachment_task', table_name='task_attachments')
    op.drop_table('task_attachments')
    op.drop_index(op.f('ix_locations_org_id'), table_name='locations')
    op.drop_index(op.f('ix_locations_name'), table_name='locations')
    op.drop_index(op.f('ix_locations_bu_id'), table_name='locations')
    op.drop_index(op.f('ix_locations_brand_id'), table_name='locations')
    op.drop_index('ix_location_metadata_gin', table_name='locations', postgresql_using='gin')
    op.drop_index('ix_location_address_gin', table_name='locations', postgresql_using='gin')
    op.drop_table('locations')
    op.drop_index(op.f('ix_tasks_title'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_reporter_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_project_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_parent_task_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_org_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_creator_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_assignee_id'), table_name='tasks')
    op.drop_index('ix_task_meta_data_gin', table_name='tasks', postgresql_using='gin')
    op.drop_index('ix_task_due_date', table_name='tasks')
    op.drop_index('ix_task_assignee', table_name='tasks')
    op.drop_table('tasks')
    op.drop_index('ix_task_status_priority', table_name='project_tasks')
    op.drop_index('ix_task_metadata_gin', table_name='project_tasks', postgresql_using='gin')
    op.drop_index(op.f('ix_project_tasks_title'), table_name='project_tasks')
    op.drop_index(op.f('ix_project_tasks_project_id'), table_name='project_tasks')
    op.drop_index(op.f('ix_project_tasks_creator_id'), table_name='project_tasks')
    op.drop_index(op.f('ix_project_tasks_assignee_id'), table_name='project_tasks')
    op.drop_table('project_tasks')
    op.drop_index(op.f('ix_project_members_user_id'), table_name='project_members')
    op.drop_index(op.f('ix_project_members_project_id'), table_name='project_members')
    op.drop_index(op.f('ix_project_members_org_id'), table_name='project_members')
    op.drop_index('ix_project_member_role', table_name='project_members')
    op.drop_table('project_members')
    op.drop_index('ix_oauth_metadata_gin', table_name='oauth_credentials', postgresql_using='gin')
    op.drop_index(op.f('ix_oauth_credentials_org_id'), table_name='oauth_credentials')
    op.drop_index(op.f('ix_oauth_credentials_data_source_id'), table_name='oauth_credentials')
    op.drop_table('oauth_credentials')
    op.drop_index('ix_target_period', table_name='metric_targets')
    op.drop_index('ix_target_meta_gin', table_name='metric_targets', postgresql_using='gin')
    op.drop_index(op.f('ix_metric_targets_org_id'), table_name='metric_targets')
    op.drop_index(op.f('ix_metric_targets_metric_def_id'), table_name='metric_targets')
    op.drop_table('metric_targets')
    op.drop_index(op.f('ix_memberships_user_id'), table_name='memberships')
    op.drop_index(op.f('ix_memberships_org_id'), table_name='memberships')
    op.drop_index(op.f('ix_memberships_department_id'), table_name='memberships')
    op.drop_index('ix_membership_status', table_name='memberships')
    op.drop_index('ix_membership_role', table_name='memberships')
    op.drop_index('ix_membership_meta_data_gin', table_name='memberships', postgresql_using='gin')
    op.drop_table('memberships')
    op.drop_index(op.f('ix_key_results_objective_id'), table_name='key_results')
    op.drop_table('key_results')
    op.drop_index(op.f('ix_invitations_token'), table_name='invitations')
    op.drop_index(op.f('ix_invitations_org_id'), table_name='invitations')
    op.drop_index(op.f('ix_invitations_invited_email'), table_name='invitations')
    op.drop_index(op.f('ix_invitations_invited_by_id'), table_name='invitations')
    op.drop_index(op.f('ix_invitations_department_id'), table_name='invitations')
    op.drop_index('ix_invitation_token', table_name='invitations')
    op.drop_index('ix_invitation_status', table_name='invitations')
    op.drop_index('ix_invitation_expires_at', table_name='invitations')
    op.drop_table('invitations')
    op.drop_index(op.f('ix_business_units_org_id'), table_name='business_units')
    op.drop_index(op.f('ix_business_units_name'), table_name='business_units')
    op.drop_index(op.f('ix_business_units_brand_id'), table_name='business_units')
    op.drop_index('ix_bu_metadata_gin', table_name='business_units', postgresql_using='gin')
    op.drop_table('business_units')
    op.drop_index('ix_ad_config_gin', table_name='ad_accounts', postgresql_using='gin')
    op.drop_index(op.f('ix_ad_accounts_org_id'), table_name='ad_accounts')
    op.drop_index(op.f('ix_ad_accounts_data_source_id'), table_name='ad_accounts')
    op.drop_table('ad_accounts')
    op.drop_index('ix_webhook_events_gin', table_name='webhook_endpoints', postgresql_using='gin')
    op.drop_index(op.f('ix_webhook_endpoints_org_id'), table_name='webhook_endpoints')
    op.drop_index('ix_webhook_enabled', table_name='webhook_endpoints')
    op.drop_table('webhook_endpoints')
    op.drop_index('ix_tg_settings_gin', table_name='telegram_integrations', postgresql_using='gin')
    op.drop_index(op.f('ix_telegram_integrations_org_id'), table_name='telegram_integrations')
    op.drop_table('telegram_integrations')
    op.drop_index(op.f('ix_task_labels_org_id'), table_name='task_labels')
    op.drop_index(op.f('ix_task_labels_name'), table_name='task_labels')
    op.drop_table('task_labels')
    op.drop_index(op.f('ix_subscriptions_plan_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_org_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_external_id'), table_name='subscriptions')
    op.drop_index('ix_subscription_limits_override_gin', table_name='subscriptions', postgresql_using='gin')
    op.drop_table('subscriptions')
    op.drop_index(op.f('ix_security_exceptions_org_id'), table_name='security_exceptions')
    op.drop_table('security_exceptions')
    op.drop_index(op.f('ix_responsibility_scopes_org_id'), table_name='responsibility_scopes')
    op.drop_table('responsibility_scopes')
    op.drop_index(op.f('ix_rate_limits_org_id'), table_name='rate_limits')
    op.drop_index(op.f('ix_rate_limits_key'), table_name='rate_limits')
    op.drop_index('ix_rate_limit_key', table_name='rate_limits')
    op.drop_table('rate_limits')
    op.drop_index(op.f('ix_projects_org_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_name'), table_name='projects')
    op.drop_index('ix_project_metadata_gin', table_name='projects', postgresql_using='gin')
    op.drop_table('projects')
    op.drop_index(op.f('ix_org_notification_settings_org_id'), table_name='org_notification_settings')
    op.drop_index('ix_org_notif_rules_gin', table_name='org_notification_settings', postgresql_using='gin')
    op.drop_index('ix_org_notif_defaults_gin', table_name='org_notification_settings', postgresql_using='gin')
    op.drop_table('org_notification_settings')
    op.drop_index(op.f('ix_org_compliances_org_id'), table_name='org_compliances')
    op.drop_index('ix_compliance_meta_gin', table_name='org_compliances', postgresql_using='gin')
    op.drop_index('ix_compliance_documents_gin', table_name='org_compliances', postgresql_using='gin')
    op.drop_table('org_compliances')
    op.drop_index(op.f('ix_objectives_org_id'), table_name='objectives')
    op.drop_table('objectives')
    op.drop_index(op.f('ix_notifications_user_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_org_id'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_index('ix_metric_meta_gin', table_name='metric_definitions', postgresql_using='gin')
    op.drop_index(op.f('ix_metric_definitions_org_id'), table_name='metric_definitions')
    op.drop_index(op.f('ix_metric_definitions_name'), table_name='metric_definitions')
    op.drop_table('metric_definitions')
    op.drop_index(op.f('ix_kpis_org_id'), table_name='kpis')
    op.drop_table('kpis')
    op.drop_index(op.f('ix_jwt_refresh_whitelists_org_id'), table_name='jwt_refresh_whitelists')
    op.drop_table('jwt_refresh_whitelists')
    op.drop_index('ix_file_status', table_name='file_assets')
    op.drop_index('ix_file_org_owner', table_name='file_assets')
    op.drop_index('ix_file_meta_data_gin', table_name='file_assets', postgresql_using='gin')
    op.drop_index(op.f('ix_file_assets_owner_id'), table_name='file_assets')
    op.drop_index(op.f('ix_file_assets_org_id'), table_name='file_assets')
    op.drop_table('file_assets')
    op.drop_index(op.f('ix_event_logs_event_type'), table_name='event_logs')
    op.drop_table('event_logs')
    op.drop_index(op.f('ix_departments_parent_id'), table_name='departments')
    op.drop_index(op.f('ix_departments_org_id'), table_name='departments')
    op.drop_index(op.f('ix_departments_name'), table_name='departments')
    op.drop_index(op.f('ix_departments_manager_id'), table_name='departments')
    op.drop_index('ix_department_parent_id', table_name='departments')
    op.drop_table('departments')
    op.drop_index('ix_ds_type_status', table_name='data_sources')
    op.drop_index('ix_ds_config_gin', table_name='data_sources', postgresql_using='gin')
    op.drop_index(op.f('ix_data_sources_org_id'), table_name='data_sources')
    op.drop_table('data_sources')
    op.drop_index(op.f('ix_change_logs_entity_type'), table_name='change_logs')
    op.drop_index(op.f('ix_change_logs_entity_id'), table_name='change_logs')
    op.drop_table('change_logs')
    op.drop_index(op.f('ix_brands_slug'), table_name='brands')
    op.drop_index(op.f('ix_brands_org_id'), table_name='brands')
    op.drop_index(op.f('ix_brands_name'), table_name='brands')
    op.drop_index('ix_brand_metadata_gin', table_name='brands', postgresql_using='gin')
    op.drop_table('brands')
    op.drop_index(op.f('ix_uploads_user_id'), table_name='uploads')
    op.drop_index(op.f('ix_uploads_storage_key'), table_name='uploads')
    op.drop_index(op.f('ix_uploads_owner_type'), table_name='uploads')
    op.drop_index(op.f('ix_uploads_owner_id'), table_name='uploads')
    op.drop_index('ix_uploads_owner', table_name='uploads')
    op.drop_index('ix_uploads_created_at', table_name='uploads')
    op.drop_table('uploads')
    op.drop_table('sessions')
    op.drop_index(op.f('ix_organizations_slug'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_owner_id'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_name'), table_name='organizations')
    op.drop_index('ix_org_owner_created', table_name='organizations')
    op.drop_index('ix_org_custom_fields_gin', table_name='organizations', postgresql_using='gin')
    op.drop_index('ix_org_address_gin', table_name='organizations', postgresql_using='gin')
    op.drop_table('organizations')
    op.drop_index(op.f('ix_email_verification_tokens_token'), table_name='email_verification_tokens')
    op.drop_table('email_verification_tokens')
    op.drop_table('clients')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_users_verification_token_hash'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_plans_code'), table_name='plans')
    op.drop_index('ix_plan_features_gin', table_name='plans', postgresql_using='gin')
    op.drop_table('plans')
    op.drop_index(op.f('ix_feature_flags_key'), table_name='feature_flags')
    op.drop_table('feature_flags')
    # ### end Alembic commands ###
