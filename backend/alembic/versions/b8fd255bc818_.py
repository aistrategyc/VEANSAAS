"""empty message

Revision ID: b8fd255bc818
Revises: 3d29de759027
Create Date: 2025-09-25 13:56:14.857804

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = 'b8fd255bc818'
down_revision: Union[str, Sequence[str], None] = '3d29de759027'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'appointments',
        sa.Column('uuid', sa.Uuid(), nullable=False),
        sa.Column('studio_uuid', sa.Uuid(), nullable=False),
        sa.Column('customer_uuid', sa.Uuid(), nullable=False),
        sa.Column('master_uuid', sa.Uuid(), nullable=True),
        sa.Column('service_uuid', sa.Uuid(), nullable=True),
        sa.Column('date_time', sa.DateTime(timezone=True), nullable=False),
        sa.Column('duration', sa.Integer(), server_default='0', nullable=False),
        sa.Column(
            'price',
            sa.Numeric(precision=10, scale=2),
            server_default='0.00',
            nullable=False,
        ),
        sa.Column('note', sa.Text(), server_default='', nullable=False),
        sa.Column('created_by_uuid', sa.Uuid(), nullable=True),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ['created_by_uuid'], ['user_service.users.uuid'], ondelete='SET NULL'
        ),
        sa.ForeignKeyConstraint(
            ['master_uuid'], ['user_service.users.uuid'], ondelete='SET NULL'
        ),
        sa.ForeignKeyConstraint(
            ['service_uuid'],
            ['organization_service.services.uuid'],
            ondelete='SET NULL',
        ),
        sa.ForeignKeyConstraint(
            ['studio_uuid'], ['organization_service.studios.uuid'], ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('uuid'),
        schema='organization_service',
    )

    appointment_prepayment_status_enum = sa.Enum(
        'PENDING',
        'PAID',
        'CANCELED',
        'REFUNDED',
        name='appointmentprepaymentstatusenum',
    )
    appointment_status_enum = sa.Enum(
        'SCHEDULED',
        'CONFIRMED',
        'IN_PROGRESS',
        'COMPLETED',
        'CANCELLED',
        name='appointmentstatusenum',
    )
    op.create_table(
        'appointment_prepayments',
        sa.Column('uuid', sa.Uuid(), nullable=False),
        sa.Column('appointment_uuid', sa.Uuid(), nullable=False),
        sa.Column(
            'amount',
            sa.Numeric(precision=10, scale=2),
            server_default='0.00',
            nullable=False,
        ),
        sa.Column(
            'status',
            appointment_prepayment_status_enum,
            server_default='PENDING',
            nullable=False,
        ),
        sa.Column('created_by_uuid', sa.Uuid(), nullable=True),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ['appointment_uuid'],
            ['organization_service.appointments.uuid'],
            ondelete='CASCADE',
        ),
        sa.ForeignKeyConstraint(
            ['created_by_uuid'], ['user_service.users.uuid'], ondelete='SET NULL'
        ),
        sa.PrimaryKeyConstraint('uuid'),
        schema='organization_service',
    )
    op.create_table(
        'appointment_statuses',
        sa.Column('uuid', sa.Uuid(), nullable=False),
        sa.Column('appointment_uuid', sa.Uuid(), nullable=False),
        sa.Column(
            'status',
            appointment_status_enum,
            server_default='CONFIRMED',
            nullable=False,
        ),
        sa.Column('comment', sa.Text(), server_default='', nullable=False),
        sa.Column('created_by_uuid', sa.Uuid(), nullable=True),
        sa.Column(
            'created_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.Column(
            'updated_at',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ['appointment_uuid'],
            ['organization_service.appointments.uuid'],
            ondelete='CASCADE',
        ),
        sa.ForeignKeyConstraint(
            ['created_by_uuid'], ['user_service.users.uuid'], ondelete='SET NULL'
        ),
        sa.PrimaryKeyConstraint('uuid'),
        schema='organization_service',
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('appointment_statuses', schema='organization_service')
    op.drop_table('appointment_prepayments', schema='organization_service')
    op.drop_table('appointments', schema='organization_service')
    # ### end Alembic commands ###
    appointment_prepayment_status_enum = sa.Enum(name='appointmentprepaymentstatusenum')
    appointment_status_enum = sa.Enum(name='appointmentstatusenum')
    appointment_prepayment_status_enum.drop(op.get_bind())
    appointment_status_enum.drop(op.get_bind())
